1. Назвать методы класса Object
equals()
hashCode()
wait()
notify()
notifyAll()
clone()
toString()
2. Привести пример плохой реализации hashCode()
Это реализация, которая возвращает константное значение.
Или это реализация, в которой используются не все поля класса.
3. Свойства, которым должен удовлетворять equals()
Симметричность - a.equals(b) = b.equals(a);
Транзитивность - a.equals(b), b.equals(c) = a.equals(c);
Рефлексивность a.equals(a) всегда true
Консистентность - повторные вызовы метода a.equals(b) должны возвращать один и тот же результат
Консистентность с методом hashCode. Если hashCode у объектов разные, то equals должен возвращать false;
4. Пример нарушения симметрии equals
Вопрос, нужно ли сравнивать объекты класса родителя и класса наследника?
Условие симметричности гласит, что два любых объекта должны быть равны независимо от того, в каком порядке они будут сравниваться.
Например, имея класс, содержащий всего одно поле строкового типа, будет неправильно сравнивать в методе equals данное поле со строкой.
Т.к. в случае обратного сравнения  метод всегда вернет значение false.
5. Package/unpackage (boxing/unboxing).
Это синтаксический сахар. Так как коллекции в Java не умеют работать с примитивными типами данных, используются классы обертки.
Integer -  класс обертка над примитивным типом int.
Компилятор Java автоматически может упаковывать примитивный int в Integer
Например, Integer i = 5 это автобоксинг
int i1 = i это анбоксинг/
6.  Отличия String/StringBuilder/StringBuffer
String это immutable объект. После создания его нельзя изменить.
StringBuilder это mutable объект, его можно изменять, он не является потокобезопасным.
StringBuffer это mutable объект, его можно изменять, он является потокобезопасным, методы класса StringBuffer синхронизированы.
7. Что такое string-pool? В чем отличие создания строки через new от литерала? Что такое String.intern()?
string-pool это пул строк закешированных в куче.
При создании String с помощью литерала компилятор Java проверит наличие строки в пуле и вернет ссылку
на строку из пула.
При создании String с использованием оператора new создастся новая ссылка.
Метод intern() проверяет наличие строки в пуле и возвращает на эту строку ссылку, если она есть в пуле.
Если этой строки нет в пуле, он ее туда интернирует и вернет ссылку.
8. Отличие checked-exception/unchecked-exception. Error, Exception, RuntimeException
Checked-exception это проверяемые исключения, мы должны обрабатывать их в коде, используя конструкцию try-catch, либо
указывать в сигнатуре метода или класса, что они могут выбрасывать это исключение, чтобы компилятор мог скомпилировать код.
Unchecked exception это непроверямое исключение, его мне нужно обрабатывать, исполбзкуя try-catch.
Пример checked exception это IOException.
Пример Unchecked exception это IndexOutOfBoundException.
Иерархия исключений, все исключения наследуются от Throwable. Error и Exception наследуют Throwable.
Класс Error связан с ошибками JVM или ThreadDeath. Является непроверямым. Примеры Error OutOfMemoryError, StackOverFlow (переполнение стека).
От Exception наследуются классы RuntimeException, ReflectiveException, IOException и SQLException.
RuntimeException является непроверяемым исключением. От него наследуются такие классы как NullPointerException, NoSuchElementException, IndexOutOfBoundsException,
ArithmeticException.
9. Что такое ассоциация, агрегация, композиция?
Эти три понятия описывают взаимоотношения между классами.
Композиция описывает такое взаимоотношение классов, как имеет (has a).
Например, автомобиль имеет внутри себя двигатель. Это строгая связь. Один двигатель может принадлежать только одному автомобилю.
Агрегация тоже описывает взаимоотношение как has a, но менее строгое.
Например, пассажиры в автомобиле это пример агрегации.
Ассоциация это связь между двумя классами, либо их общее отношением к третьему классу.
10. Какой самый надежный способ проверить, равны ли два значения типа double?
Double.compare(d1, d2) == 0.
11. Как легко развернуть массив?
Воспользоваться утильным классом Arrays и вызвать метод reverse().
12. Как легко удалить из списка дубликаты(не нарушая порядок)?
Можно воспользоваться Stream API и у объекта stream взывать метод distinct(),
а затем использовать Collector, чтобы собрать stream в обратно в список.
13. Почему хранить пароль предпочтительнее в char[]/byte[], а не в String?
Garbage collector не сразу удаляет объекты из памяти, когда обнуляется ссылка на объект, сам объект еще какое-то время хранится в памяти.
С массивом char[] или byte[] так не происходит, мы можем после использования пароля очистить массив byte[] или char[].
14. Interface vs Abstract Class
Интерфейс это контракт, который должен реализовать класс, его имплементировавший.
Абстрактный класс это каркас для наследников. Наследники должны реализовать абстрактные методы класса предка.
15. В чем проблемы Random?
В том, что по большому счету Random выдает псевдослучайные значения. Можно предугадать какое значение будет следующим,
поняв алогрит генерации случайного значения.
16. Что такое capturing/non-capturing lambda
Самый простой тип лямбд это non-capturing или не захватывающая лямбда.
Она не взаимодействует с окружением, не вызывает методы экземпляров класса, может вызывать статические методы.
capturing lambda взаимеодейтсвует с окружением, может вызывать методы экземпляров и использовать поля класса.
17. Что такое type-erasure?
Это стирание типов. Данный вопрос напрямую связан с работой дженериков в java. По сути дженерики видны только на этапе компиляции.
Если посмотреть скомпилированные классы, мы увидим, что например ArrayList<String> превратится в обычный ArrayList объектов,
но благодаря компилятору, мы будем уверены что в нем хранятся только строки и спокойно будем их кастовать к строкам при вытаскивании объектов из арэйлиста.
18. Метод принимает ссылку на List<Parent>. Child наследуется от Parent. Можно ли в метод передать List<Child>?
Нет. Чтобы метод мог работать с List<Child> в качестве параметра метода должен быть указать List<? extends Parent>.
19. Ковариантность/контравариантность. Что такое PECS?
Ковараинтность и контрвариантность это способы переноса наследования типов на производные для них типы (контейнеры, обобщенные типы, делегаты)
Ковариантность extends
Контрвариантность super
Ковариантность позволяет в качестве параметра метода принимать объекты наследники.
Контрвариантность позволяет принимать в качестве параметра метода объекты предки.
getWeight(List<? extends Citrus> citrusList) пример ковариантности.
addAll(List<? super Citrus> citrusList) пример контрвараинтности.
PECS это аббревиатура от producer extends consumer super.
Мы можем прочитать из продюсера объект ограниченный от object до того типа который указан после extends включительно.
В консюмер мы можем записать любой объект наследник того класса который указано после super/.
20. Что такое Hard-references, weak references, soft-references, phantom-references?
Hard-references это сильная ссылка.
Пример сильной ссылки Cat cat = new Cat();
Объект cat будет доступен GC после cat = null;
Soft-references могут использоваться для создания кэша.
Если на объект ведут только soft-references, GC удалит этот объект, но это не точно.
Если на объект ведут только weak-references, GC удалит этот объект.
Если на объект ведут только Phantom-references, GC удалит этот объект, но потом.
21. Какими тремя способами можно сконструировать объект в Java?
С помощью оператора new. Например, Cat cat = new Cat();
С помощью рефлексии, имея Class можно вызвать метод newInstance();
С помощью рефлексии, вызвать метод invoke() у конструктора.
С помощью метода clone() можно создать копию объекта.
С помощью дессериализации можно дессериалзиовать объект из файла.




